openapi: 3.0.0
info:
  title: Web Portfolio Backend
  description: >-
    This project is designed to provide developers with an **easy-to-integrate
    backend** for managing and displaying their **profile data and portfolio
    content**. It offers flexibility for developers who want to build and
    customize their portfolio without handling backend complexities. Also! There
    is built in Open Source LLM to improve your writing in website!


    This is a **collaborative effort** among team members of the **Mabaryok
    Discord Community**, focusing solely on the **server-side backend** to
    provide a set of **APIs** for frontend applications built by the community.
  version: 1.0.0
servers:
  - url: http://{{url}}
components:
  securitySchemes:
    noauthAuth:
      type: http
      scheme: noauth
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: Profile
    description: >-
      This Section handles all endpoint about user profile. You could get User
      Profile, download the cv, update user profile, and so on


      All endpoint are specified in folder. Public folder meaning to access
      those endpoint doesn't need any token. Private folder, need token to
      access the endpoint.
  - name: Profile > Public
    description: >-
      This folder contains public endpoints that can be accessed without
      authentication.
  - name: Profile > Private (Need Token)
    description: >-
      This folder contains private endpoints that require authentication via
      Bearer Token.
  - name: AI (Need Token)
  - name: Project Entry
  - name: Project Entry > Private (Need Token)
    description: >-
      This folder contains private endpoints that require authentication via
      Bearer Token.
  - name: Project Entry > Public
    description: >-
      This folder contains public endpoints that can be accessed without
      authentication.
  - name: Certificate Entry
  - name: Certificate Entry > Private (Need token)
    description: >-
      This folder contains private endpoints that require authentication via
      Bearer Token.
  - name: Certificate Entry > Public
    description: >-
      This folder contains public endpoints that can be accessed without
      authentication.
  - name: Experience Entry
  - name: Experience Entry > Private (Need token)
    description: >-
      This folder contains private endpoints that require authentication via
      Bearer Token.
  - name: Experience Entry > Public
    description: >-
      This folder contains public endpoints that can be accessed without
      authentication.
  - name: File or Image Endpoint
    description: Separated file or image endpoint for easy and better handling
paths:
  /api/v1/user:
    get:
      tags:
        - Profile > Public
      summary: '[Profile] Get Profile'
      description: >-
        StartFragment


        ### **Endpoint: \[Profile\] Get Profile**


        **Method:** GET  

        **Path:** `api/v1/user`  

        **Authentication:** Not Required


        ### **Description:**


        This endpoint retrieves **public user profile information**, including:


        - **Name**
            
        - **Bio**
            
        - **Social links**
            
        - **Profile Images**
            

        ### **Important Notes:**


        - Since authentication is **not required**, this endpoint returns **only
        publicly available profile information**.
            
        - If the user profile does not exist, the server will return an
        appropriate error response (e.g., **404 Not Found**).
            
        - This endpoint **does not include sensitive data** such as username,
        and password
      security:
        - noauthAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 1000;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '1000'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '999'
            RateLimit-Reset:
              schema:
                type: integer
                example: '900'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '200'
            ETag:
              schema:
                type: string
                example: W/"c8-bFIVyVd11JqgW2alhNdKqrKNhhg"
            Date:
              schema:
                type: string
                example: Wed, 19 Mar 2025 14:07:35 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Berhasil Ambil User
                data:
                  - cv:
                      download: 0
                      url: null
                    name: Lintang Anugerah
                    bio: Bio
                    image: https://placehold.co/400
                    social:
                      - appname: Linkedin
                        link: https://www.linkedin.com/in/lintanganugerah/
                      - appname: GitHub
                        link: https://github.com/lintanganugerah
    put:
      tags:
        - Profile > Private (Need Token)
      summary: '[Profile] Update Profile'
      description: >-
        StartFragment


        ### **Endpoint: \[Profile\] Update Profile**


        **Method:** PUT  

        **Path:** `api/v1/user/profile`  

        **Authentication:** Required


        ### **Description:**


        This endpoint allows users to update their **profile information**,
        including:


        - **Name** (Full Name)
            
        - **Bio** (Description about the user)
            
        - **Social Links** (A list of social media accounts)
            

        Users can update **any single field** or **multiple fields** in one
        request.


        ### **Request Body:**


        ``` json

        {
          "name": "John Doe",
          "bio": "Software Engineer | Open Source Enthusiast",
          "social": [
            {
              "app_name": "Twitter",
              "link": "https://twitter.com/johndoe"
            }
          ]
        }

         ```

        ### **Important Notes:**


        - **Partial updates are allowed.** You can send **only one field**
        (e.g., just `name` or just `bio`).
            
        - **If a field is not included in the request, it remains unchanged.**
            
        - **The** **`social`** **array must contain valid objects** with
        `app_name` (platform name) and `link` (profile URL).
            
        - **To update profile image or CV**, refer to the [file upload
        endpoint](https://go.postman.co/workspace/e673e172-c878-4d61-9366-0a961dd8cade/documentation/26853080-5a6330d2-088a-4e18-bf50-52335f6ab02b?entity=request-012762ce-0d3b-4032-b086-3dd6ba4ae1fc)
        **(**`api/v1/file/upload`**)**.
            
        - **To update username or password**, use the [update account
        endpoint](https://go.postman.co/workspace/e673e172-c878-4d61-9366-0a961dd8cade/documentation/26853080-5a6330d2-088a-4e18-bf50-52335f6ab02b?entity=request-b5b68da4-55da-445d-ae6f-de12af221e43)
        **(**`api/v1/user/profile/account`**)**.
            
        - If an invalid request is sent (e.g., missing required fields in
        `social`), the server will return a **400 Bad Request** response.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Name Revised
                bio: Bio Revised
                social:
                  - app_name: Github
                    link: https://github.com/johndoe
                  - app_name: LinkedIn
                    link: https://linkedin.com/johndoe
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 1000;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '1000'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '999'
            RateLimit-Reset:
              schema:
                type: integer
                example: '900'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '603'
            ETag:
              schema:
                type: string
                example: W/"25b-f/UAHC2H0zdP4/3F8CKU6E7SWz4"
            Date:
              schema:
                type: string
                example: Tue, 25 Mar 2025 19:16:52 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Profil Berhasil Diubah
                data:
                  cv_file:
                    url: 174292550134947734fdd-1c29-47f0-9211-9b5d88376e40.pdf
                    download: 3
                  _id: 67e2d7b3afcf2a5f6b26d6c4
                  username: username
                  name: Name Revised
                  bio: Bio Revised
                  profile_image: 1742925501351d56e25c8-5788-4cd8-b840-f92ff384db8d.jpeg
                  social:
                    - app_name: Github
                      link: https://github.com/johndoe
                      _id: 67e30124286755e1c157758c
                    - app_name: LinkedIn
                      link: https://linkedin.com/johndoe
                      _id: 67e30124286755e1c157758d
                  createdAt: '2025-03-25T16:20:03.592Z'
                  updatedAt: '2025-03-25T19:16:52.176Z'
                  __v: 0
        '400':
          description: Bad Request
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '638'
            ETag:
              schema:
                type: string
                example: W/"27e-2VSST7yZHyfZqWau0DNaH6ADY7E"
            Date:
              schema:
                type: string
                example: Tue, 11 Feb 2025 07:39:30 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                message: >-
                  Endpoint ini tidak bisa digunakan untuk mengubah username dan
                  password
  /api/v1/user/cv:
    get:
      tags:
        - Profile > Public
      summary: '[Profile] Download CV'
      description: >-
        ### **Endpoint: \[Profile\] Download CV**


        **Method:** GET  

        **Path:** `api/v1/user/cv`  

        **Authentication:** Not Required


        ### **Description:**


        This endpoint allows download a CV file automatically when accessed.


        ### **Behavior:**


        - When a request is made, the CV file will be **immediately downloaded**
        without requiring further interaction.
            
        - The system will **automatically update the download count**, tracking
        how many times the CV has been downloaded.
            

        ### **Important Notes:**


        - Since authentication is **not required**, anyone can access and
        download the CV.
            
        - The response will include the file as an attachment, triggering an
        automatic download in most browsers.
            
        - If the CV file is not available, the endpoint will return an
        appropriate error response
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/user/account:
    get:
      tags:
        - Profile > Private (Need Token)
      summary: '[Profile] Get User Account'
      description: >-
        ### **Endpoint: \[Profile\] Get User Account**


        **Method:** GET  

        **Path:** `api/v1/user/account`  

        **Authentication:** Required


        ### **Description:**


        This endpoint retrieves **user account information**, including:
        **Username**


        This endpoint provides necessary account data for users who want to
        update their profile using the [Update Profile
        Endpoint](https://go.postman.co/workspace/e673e172-c878-4d61-9366-0a961dd8cade/documentation/26853080-5a6330d2-088a-4e18-bf50-52335f6ab02b?entity=request-b5b68da4-55da-445d-ae6f-de12af221e43)
        (`PUT api/v1/user/account`).


        ### **Important Notes:**


        - **Authentication is required** to access this endpoint. Only the
        authenticated user can retrieve their own account information.
            
        - This endpoint **does not return sensitive details** such as passwords
        or authentication tokens.
            
        - If the user account is not found, the server will return a **404 Not
        Found** response.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 1000;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '1000'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '999'
            RateLimit-Reset:
              schema:
                type: integer
                example: '900'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '98'
            ETag:
              schema:
                type: string
                example: W/"62-794ZdarZsBx5pW+wp+vkgPYd8TE"
            Date:
              schema:
                type: string
                example: Tue, 25 Mar 2025 19:06:22 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Successfully get username from user
                data:
                  username: username
    put:
      tags:
        - Profile > Private (Need Token)
      summary: '[Profile] Update Account Settings'
      description: >-
        StartFragment


        ### **Endpoint: \[Account\] Update Account Settings**


        **Method:** PUT  

        **Path:** `api/v1/user/profile/account`  

        **Authentication:** Required


        ### **Description:**


        This endpoint allows users to update their **account settings**,
        including:


        - **Username**
            
        - **Password**
            

        You can update only the `username`, or only the `password` field.


        ### **Request Body:**


        ```

        {
          "username": "newUsername",
          "password": "newPassword"
        }

         ```

        ### **Important Notes:**


        - **Authentication is required** to update account details. Only the
        authenticated user can modify their own account.
            
        - If the request is invalid, a **400 Bad Request** response will be
        returned.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: newUsername
                password: passwordTes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '665'
            ETag:
              schema:
                type: string
                example: W/"299-uMGwpdqWc0aZZkoL/RyckLqYGII"
            Date:
              schema:
                type: string
                example: Tue, 11 Feb 2025 08:07:55 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: Profile Berhasil di Update Silahkan Login Kembali
                data:
                  cv:
                    url: >-
                      public/assets/upload_by_user/cv/1739259570214e388a909-fe1b-40c0-8587-bba7891aa610-cv-Revisiasdadsad.pdf
                    download: 1
                  _id: 67a9e3183d5dc1f063e1ca3f
                  username: newUsername
                  name: Revisi asdadsad
                  bio: Bio hasil revisi
                  contact: '126317263728163'
                  image: >-
                    public/assets/upload_by_user/image/1739259570211cfee19f9-07b1-4eeb-8ec7-2658d5669414-image-Revisiasdadsad.jpg
                  social:
                    - app_name: tesRevisi
                      link: https://github.com/johndoe
                      _id: 67aafeb213d40ff406377d99
                  createdAt: '2025-02-10T11:29:28.842Z'
                  updatedAt: '2025-02-11T08:07:55.009Z'
                  __v: 0
  /api/v1/ai/completion/enhancewriting/sse:
    post:
      tags:
        - AI (Need Token)
      summary: '[AI] Enhance Writing (SSE)'
      description: >-
        StartFragment


        ### **Endpoint: \[AI\] Enhance Writing (SSE)**


        **Method:** POST  

        **Path:** `api/v1/ai/completion/enhancewriting/sse`  

        **Authentication:** Required


        ### **Description:**


        This endpoint enhances user-written text using AI, providing a **more
        polished, structured, and professional output**.


        It is designed for improving various content sections such as **bio
        descriptions, work experience summaries, and project details**.


        AI-generated enhancements are **streamed in real-time** using
        **Server-Sent Events (SSE)**, allowing the frontend to display
        improvements progressively.


        ### **Request Body:**


        ```

        {
          "messages": "**PART**: bio. **TEXT**: I do digital marketing. I run ads, manage social media, and analyze data. I try to help businesses grow online."
        }

         ```

        #### **Request Parameters:**


        - `**PART**`: The **section** being enhanced (**bio**, **experience**,
        **project**, etc.).
            
        - `**TEXT**`: The **raw user input** that needs improvement.
            
        - **The** **`PART`** **parameter is mandatory and must be wrapped with
        double asterisks (****`**`****).**
            

        ### **Usage Notes:**


        ✅ **Frontend must listen to SSE events** to receive the enhanced text
        progressively.  

        ✅ **Supports real-time streaming for a smoother user experience.**  

        ✅ **Improves text clarity, professionalism, and structure.**  

        ✅ **Works for anither sections like** **`bio`****,** **`experience`****,
        etc.**


        ❌ **Does not accept multiple texts and section in one request.**  

        ❌ **Not for grammar-checking; focuses on enhancement and readability.**
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                messages: >-
                  **PART**: bio. **TEXT**: I do digital marketing. I run ads,
                  manage social media, and analyze data. I try to help
                  businesses grow online.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            Content-Type:
              schema:
                type: string
                example: text/event-stream
            Cache-Control:
              schema:
                type: string
                example: no-cache
            Connection:
              schema:
                type: string
                example: keep-alive
            Content-Encoding:
              schema:
                type: string
                example: br
            Date:
              schema:
                type: string
                example: Thu, 27 Feb 2025 07:55:52 GMT
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
          content:
            text/plain:
              schema:
                type: string
              example: >+
                data: {"type":"connection","message":"Connection established.
                Waiting for model response...","state":"start","done":false}


                data: {"content":"Results-Driven Digital"}


                data: {"content":" Marketing Specialist"}


                data: {"content":". Strategic and innovative"}


                data: {"content":" marketing professional"}


                data: {"content":" with expertise in leveraging"}


                data: {"content":" digital channels to"}


                data: {"content":" drive business growth"}


                data: {"content":", enhance brand visibility"}


                data: {"content":", and foster meaningful"}


                data: {"content":" customer engagement"}


                data: {"content":". Proven track record"}


                data: {"content":" of successfully managing"}


                data: {"content":" and optimizing online"}


                data: {"content":" advertising campaigns"}


                data: {"content":", social media platforms"}


                data: {"content":", and data analysis to"}


                data: {"content":" inform data-driven decisions"}


                data: {"content":". Adept at developing"}


                data: {"content":" and implementing tailored"}


                data: {"content":" digital marketing strategies"}


                data: {"content":" that boost online presence"}


                data: {"content":", conversions, and revenue"}


                data: {"content":". Passionate about staying"}


                data: {"content":" up-to-date with the"}


                data: {"content":" latest industry trends"}


                data: {"content":" and technologies, including"}


                data: {"content":" SEO, PPC, email marketing"}


                data: {"content":", and social media marketing"}


                data: {"content":", to deliver impactful"}


                data: {"content":" and measurable results"}


                data: {"content":" for businesses in the"}


                data: {"content":" digital landscape."}


                data: {"finalMessage":"Results-Driven Digital Marketing
                Specialist. Strategic and innovative marketing professional with
                expertise in leveraging digital channels to drive business
                growth, enhance brand visibility, and foster meaningful customer
                engagement. Proven track record of successfully managing and
                optimizing online advertising campaigns, social media platforms,
                and data analysis to inform data-driven decisions. Adept at
                developing and implementing tailored digital marketing
                strategies that boost online presence, conversions, and revenue.
                Passionate about staying up-to-date with the latest industry
                trends and technologies, including SEO, PPC, email marketing,
                and social media marketing, to deliver impactful and measurable
                results for businesses in the digital landscape."}


                data: {"state":"finish","done":true}

  /api/v1/ai/completion/enhancewriting:
    post:
      tags:
        - AI (Need Token)
      summary: '[AI] Enhance Writing'
      description: >-
        StartFragment


        ### **Endpoint: \[AI\] Enhance Writing**


        **Method:** POST  

        **Path:** `api/v1/ai/completion/enhancewriting`  

        **Authentication:** Not Required


        ### **Description:**


        This endpoint is the same as before to enhances user-written text by
        improving **clarity, professionalism, and readability** using AI.


        **Unlike the SSE version, this endpoint follows a basic request-response
        format, meaning the frontend will receive the full enhanced text in a
        single response.**


        ⚠️⚠️ **Processing may take 4+ seconds**, as backend needs to gather all
        the text-chunk from the AI Models. It is recommended to use the SSE
        Version, more seamless and better experience


        ### **Request Body:**


        ```

        {
          "messages": "**PART**: experience. **TEXT**: • Managed projects and made sure they were finished on time. • Talked with the team and clients about project progress. • Solved problems when issues happened in the project. • Used some tools to organize tasks."
        }

         ```

        #### **Request Parameters:**


        - `**PART**`: The **content category** being enhanced (**bio**,
        **experience**, **project**, etc.).
            
        - `**TEXT**`: The **raw user input** that needs improvement.
            
        - **The** **`PART`** **parameter is mandatory and must be wrapped with
        double asterisks (****`**`****).**
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                messages: >-
                  **PART**: experience. **TEXT**: • Managed projects and made
                  sure they were finished on time. • Talked with the team and
                  clients about project progress. • Solved problems when issues
                  happened in the project. • Used some tools to organize tasks.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            ETag:
              schema:
                type: string
                example: W/"549-4jUgS//ZLtu8OLd3gbw0kvxEMpk"
            Content-Encoding:
              schema:
                type: string
                example: br
            Date:
              schema:
                type: string
                example: Thu, 27 Feb 2025 07:53:33 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                data:
                  id: gen-1740642810-17wVXe3h2XLEuoaKiycb
                  created: 1740642810
                  message:
                    - role: user
                      content: >-
                        **PART**: experience. **TEXT**: • Managed projects and
                        made sure they were finished on time. • Talked with the
                        team and clients about project progress. • Solved
                        problems when issues happened in the project. • Used
                        some tools to organize tasks.
                    - role: assistant
                      content: >-
                        - Spearheaded multiple projects from initiation to
                        completion, ensuring timely delivery and exceeding
                        client expectations by up to 95% through meticulous
                        planning and resource allocation.

                        - Fostered strong relationships with cross-functional
                        teams and clients, providing regular progress updates
                        and insights to ensure seamless collaboration and issue
                        resolution, resulting in a 30% increase in client
                        satisfaction.

                        - Proactively identified and resolved project
                        roadblocks, leveraging analytical and problem-solving
                        skills to mitigate risks and implement corrective
                        actions, thereby minimizing delays and cost overruns by
                        25%.

                        - Utilized a range of project management tools,
                        including Asana, Trello, and MS Project, to streamline
                        task assignment, tracking, and prioritization, enhancing
                        team productivity by 40% and facilitating data-driven
                        decision-making.
                      refusal: null
                  prompt_tokens: 653
                  completion_tokens: 149
                  total_tokens: 802
  /api/v1/project/create:
    post:
      tags:
        - Project Entry > Private (Need Token)
      summary: '[Project Entry] Create Project'
      description: >-
        ### **Endpoint: \[Project Entry\] Create Project**


        **Method:** POST  

        **Path:** `api/v1/project/create`  

        **Authentication:** Required


        ### **Description:**


        This endpoint creates a new project with a title, description, and
        technology details.


        ### **Important Notes:**


        - This endpoint **accepts JSON raw data** in the request body.
            
        - **Do not include image files** in this request.
            
        - If you need to upload an image (such as a project thumbnail), first
        create the project using this endpoint, then use the **file** [upload
        endpoint](https://go.postman.co/workspace/e673e172-c878-4d61-9366-0a961dd8cade/documentation/26853080-5a6330d2-088a-4e18-bf50-52335f6ab02b?entity=request-012762ce-0d3b-4032-b086-3dd6ba4ae1fc)
        (`api/v1/file/upload`) to upload images separately.
            
        - If no project thumbnail is uploaded, the system will **automatically
        set a default thumbnail** from [placehold.co](https://placehold.co). It
        is still best to upload the thumbnail
            

        ### **Request Body:**


        ```

        {
          "title": "[TITLE HERE]",
          "description": "[JSON Generated by EditorJS]",
          "technology": "[TEXT DATA SEPARATED BY COMMA]"
        }

         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Tes 2
                description:
                  time: 1740727077181
                  blocks:
                    - id: mhTl6ghSkV
                      type: paragraph
                      data:
                        text: >-
                          Hey. Meet the new Editor. On this picture you can see
                          it in action. Then, try a demo 🤓
                    - id: l98dyx3yjb
                      type: header
                      data:
                        text: Key features
                        level: 3
                    - id: os_YI4eub4
                      type: list
                      data:
                        type: unordered
                        items:
                          - It is a block-style editor
                          - It returns clean data output in JSON
                          - >-
                            Designed to be extendable and pluggable with a <a
                            href="https://editorjs.io/creating-a-block-tool">simple
                            API</a>
                    - id: 1yKeXKxN7-
                      type: header
                      data:
                        text: What does it mean «block-styled editor»
                        level: 3
                technology: Next JS, Node JS
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '298'
            RateLimit-Reset:
              schema:
                type: integer
                example: '729'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '656'
            ETag:
              schema:
                type: string
                example: W/"290-YnjfJEvX2WXaoSEz+R9dbE7eLfI"
            Date:
              schema:
                type: string
                example: Fri, 28 Feb 2025 13:38:57 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Berhasil
                data:
                  title: aaa
                  description:
                    time: 1740727077181
                    blocks:
                      - type: paragraph
                        data:
                          text: >-
                            Hey. Meet the new Editor. On this picture you can
                            see it in action. Then, try a demo 🤓
                      - type: header
                        data:
                          text: Key features
                          level: 3
                      - type: list
                        data:
                          type: unordered
                          items:
                            - It is a block-style editor
                            - It returns clean data output in JSON
                            - >-
                              Designed to be extendable and pluggable with a <a
                              href="https://editorjs.io/creating-a-block-tool">simple
                              API</a>
                      - type: header
                        data:
                          text: What does it mean «block-styled editor»
                          level: 3
                  technology: Next JS, Node JS
  /api/v1/project/update/{id}:
    put:
      tags:
        - Project Entry > Private (Need Token)
      summary: '[Project Entry] Update'
      description: >-
        ### **Endpoint: \[Project Entry\] Update**


        **Method:** PUT  

        **Path:** `api/v1/project/update/:id`  

        **Authentication:** Required


        ### **Description:**


        This endpoint updates an existing project entry.


        - You can update only the `title`, only the `description`, or only the
        `technology` field.
            
        - You can also update all fields at once in a single request.
            
        - Any fields not included in the request will remain unchanged.
            

        ### **Important Notes:**


        - This endpoint **accepts JSON raw data** in the request body.
            
        - **Do not include image files** in this request.
            
        - If you need to upload an image (such as a project thumbnail), then use
        the [upload
        endpoint](https://go.postman.co/workspace/e673e172-c878-4d61-9366-0a961dd8cade/documentation/26853080-5a6330d2-088a-4e18-bf50-52335f6ab02b?entity=request-012762ce-0d3b-4032-b086-3dd6ba4ae1fc)
        (`api/v1/file/upload`) to update images.
            

        ### **Request Body:**


        ``` json

        {
          "title": "[TITLE HERE]",
          "description": "[JSON Generated by EditorJS]",
          "technology": "[TEXT DATA SEPARATED BY COMMA]"
        }

         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: revisi lagi
                description:
                  time: 1740727077181
                  blocks:
                    - type: paragraph
                      data:
                        text: >-
                          Hey. Meet the new Editor. On this picture you can see
                          it in action. Then, try a demo 🤓
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67c1bc71ba0ae3bc8bae72b3
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '292'
            RateLimit-Reset:
              schema:
                type: integer
                example: '813'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '396'
            ETag:
              schema:
                type: string
                example: W/"18c-FzL0sRH9YeL8Foj2xbBVLif91hk"
            Date:
              schema:
                type: string
                example: Fri, 28 Feb 2025 14:32:01 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Berhasil
                data:
                  _id: 67c1bc71ba0ae3bc8bae72b3
                  title: revisi lagi
                  description:
                    time: 1740727077181
                    blocks:
                      - type: paragraph
                        data:
                          text: >-
                            Hey. Meet the new Editor. On this picture you can
                            see it in action. Then, try a demo 🤓
                  technology: Next JS, Node JS
                  createdAt: '2025-02-28T13:38:57.537Z'
                  updatedAt: '2025-02-28T14:32:00.984Z'
                  __v: 0
  /api/v1/project/delete/{id}:
    delete:
      tags:
        - Project Entry > Private (Need Token)
      summary: '[Project Entry] Delete project'
      description: >-
        ### **Endpoint: \[Project Entry\] Delete Project**


        **Method:** DELETE  

        **Path:** `api/v1/project/delete/:id`  

        **Authentication:** Required


        ### **Description:**


        This endpoint deletes a project entry based on the provided project ID.


        **Behavior:**


        - If the project is successfully deleted, the response will confirm the
        deletion.
            
        - If the project **does not exist** or the provided ID is invalid, the
        server will return a **400 Bad Request** response.
            

        **Important Notes:**


        - Ensure that the project ID is correct before making the request.
            
        - This action **cannot be undone**, and all related data (except files
        stored separately) will be permanently removed.
            
        - If the project includes an uploaded image, the image file **will be
        deleted automatically**
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67c1bc71ba0ae3bc8bae72b3
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/project/all:
    get:
      tags:
        - Project Entry > Public
      summary: '[Project Entry] Get All'
      description: |
        ### Endpoint: [Project Entry] Get All
        - **Method:** GET
        - **Path:** `api/v1/project/all`
        - **Authentication:** Not Required
        - **Description:**
          - Fetches project details including title, description, and technology stack.
      security:
        - noauthAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '296'
            RateLimit-Reset:
              schema:
                type: integer
                example: '698'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            ETag:
              schema:
                type: string
                example: W/"5e6-5ngbOUP9AEUICNhaAmjBq9qVGoY"
            Content-Encoding:
              schema:
                type: string
                example: br
            Date:
              schema:
                type: string
                example: Fri, 28 Feb 2025 14:23:10 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Transfer-Encoding:
              schema:
                type: string
                example: chunked
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Berhasil
                data:
                  - _id: 67c1bc71ba0ae3bc8bae72b3
                    title: aaa
                    description:
                      time: 1740727077181
                      blocks:
                        - type: paragraph
                          data:
                            text: >-
                              Hey. Meet the new Editor. On this picture you can
                              see it in action. Then, try a demo 🤓
                        - type: header
                          data:
                            text: Key features
                            level: 3
                        - type: list
                          data:
                            type: unordered
                            items:
                              - It is a block-style editor
                              - It returns clean data output in JSON
                              - >-
                                Designed to be extendable and pluggable with a
                                <a
                                href="https://editorjs.io/creating-a-block-tool">simple
                                API</a>
                        - type: header
                          data:
                            text: What does it mean «block-styled editor»
                            level: 3
                    technology: Next JS, Node JS
                    createdAt: '2025-02-28T13:38:57.537Z'
                    updatedAt: '2025-02-28T13:38:57.537Z'
                    __v: 0
                  - _id: 67c1c6cb035d9d5dbab42389
                    title: Tes 2
                    description:
                      time: 1740727077181
                      blocks:
                        - type: paragraph
                          data:
                            text: >-
                              Hey. Meet the new Editor. On this picture you can
                              see it in action. Then, try a demo 🤓
                        - type: header
                          data:
                            text: Key features
                            level: 3
                        - type: list
                          data:
                            type: unordered
                            items:
                              - It is a block-style editor
                              - It returns clean data output in JSON
                              - >-
                                Designed to be extendable and pluggable with a
                                <a
                                href="https://editorjs.io/creating-a-block-tool">simple
                                API</a>
                        - type: header
                          data:
                            text: What does it mean «block-styled editor»
                            level: 3
                    technology: Next JS, Node JS
                    createdAt: '2025-02-28T14:23:07.572Z'
                    updatedAt: '2025-02-28T14:23:07.572Z'
                    __v: 0
  /api/v1/project/{id}:
    get:
      tags:
        - Project Entry > Public
      summary: '[Project Entry] Get By ID'
      description: |
        ### Endpoint: [Project Entry] Get By ID
        - **Method:** GET
        - **Path:** `api/v1/project/:id`
        - **Authentication:** Not Required
        - **Description:**
          - Fetches project details including title, description, and technology stack.
      security:
        - noauthAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67c1bc71ba0ae3bc8bae72b3
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '295'
            RateLimit-Reset:
              schema:
                type: integer
                example: '693'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '775'
            ETag:
              schema:
                type: string
                example: W/"307-ZOBSKu7Uk6iroCSNVnxUdBN+/Es"
            Date:
              schema:
                type: string
                example: Fri, 28 Feb 2025 14:23:15 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Berhasil
                data:
                  _id: 67c1bc71ba0ae3bc8bae72b3
                  title: aaa
                  description:
                    time: 1740727077181
                    blocks:
                      - type: paragraph
                        data:
                          text: >-
                            Hey. Meet the new Editor. On this picture you can
                            see it in action. Then, try a demo 🤓
                      - type: header
                        data:
                          text: Key features
                          level: 3
                      - type: list
                        data:
                          type: unordered
                          items:
                            - It is a block-style editor
                            - It returns clean data output in JSON
                            - >-
                              Designed to be extendable and pluggable with a <a
                              href="https://editorjs.io/creating-a-block-tool">simple
                              API</a>
                      - type: header
                        data:
                          text: What does it mean «block-styled editor»
                          level: 3
                  technology: Next JS, Node JS
                  createdAt: '2025-02-28T13:38:57.537Z'
                  updatedAt: '2025-02-28T13:38:57.537Z'
                  __v: 0
  /api/v1/certificate/create:
    post:
      tags:
        - Certificate Entry > Private (Need token)
      summary: '[Certificate Entry] Create new'
      description: >-
        ### **Endpoint: \[Certificate Entry\] Create New**


        **Method:** POST  

        **Path:** `api/v1/certificate/create`  

        **Authentication:** Required


        ---


        ### **Description:**


        This endpoint allows users to **create a new certification record**,
        including details such as the title, description, issuance year, and an
        optional certificate link.


        ---


        ### **Request Body:**


        ```

        {
          "title": "Google Backend Dev",
          "description": "I'm grateful that I met Google Backend Developer Certification.",
          "link": "https://credly.com/id",
          "year": "2024"
        }

         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: Certification
                description: I'm grateful that i met Google Backend developer Certification
                link: https://credly.com/id
                year: '2024'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '296'
            RateLimit-Reset:
              schema:
                type: integer
                example: '806'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '221'
            ETag:
              schema:
                type: string
                example: W/"dd-KVxuERIdauYJlEu5ei9GiBHlUSw"
            Date:
              schema:
                type: string
                example: Mon, 03 Mar 2025 14:32:43 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Successfully create sertificate entry
                data:
                  title: Certification
                  description: >-
                    I'm grateful that i met Google Backend developer
                    Certification
                  link: https://credly.com/id
                  year: 2024
  /api/v1/certificate/update/{id}:
    put:
      tags:
        - Certificate Entry > Private (Need token)
      summary: '[Certificate Entry] Update Certificate'
      description: >-
        StartFragment


        ### **Endpoint: \[Certificate Entry\] Update Certificate**


        **Method:** PUT  

        **Path:** `api/v1/certificate/update/:id`  

        **Authentication:** Required


        ---


        ### **Description:**


        This endpoint updates an existing certificate entry based on the
        provided certificate ID. Users can update any field individually without
        needing to send the full certificate data.


        ---


        ### **Important Notes:**


        - This endpoint **accepts JSON raw data** in the request body.
            
        - Users **can update one or more fields** (title, description, link, or
        year) without modifying the entire certificate entry.
            
        - The `id` in the path must be a valid certificate ID that exists in the
        system.
            
        - If the certificate does not exist, the system will return an
        appropriate error response.
            

        ---


        ### **Request Body:**


        ```

        {
          "title": "New Certificate",
          "description": "Updated certification details",
          "link": "https://credly.com/id",
          "year": "2025"
        }

         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: New Certificate
                description: Revisi
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67c5bfdebc69375c2e4e0ece
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '297'
            RateLimit-Reset:
              schema:
                type: integer
                example: '849'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '280'
            ETag:
              schema:
                type: string
                example: W/"118-YagTWlV4fpFGTy1O1X3hRvjgJsU"
            Date:
              schema:
                type: string
                example: Mon, 03 Mar 2025 15:11:50 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Successfully update certificate
                data:
                  _id: 67c5bfdebc69375c2e4e0ece
                  title: New Certificate
                  description: Revisi
                  link: https://credly.com/id
                  year: 2024
                  createdAt: '2025-03-03T14:42:38.751Z'
                  updatedAt: '2025-03-03T15:11:50.458Z'
                  __v: 0
  /api/v1/certificate/delete/{id}:
    delete:
      tags:
        - Certificate Entry > Private (Need token)
      summary: '[Certificate Entry] Delete Certificate'
      description: >-
        ### **Endpoint: \[Certificate Entry\] Delete Certificate**


        **Method:** DELETE  

        **Path:** `api/v1/certificate/delete/:id`  

        **Authentication:** Required


        ---


        ### **Description:**


        This endpoint **permanently deletes** a certificate record based on the
        provided certificate ID. The deletion is irreversible, and the
        certificate will be removed from the system.


        ---


        ### **Important Notes:**


        - **Authentication is required**—only the certificate owner can delete
        their own certificate.
            
        - The `id` in the path must be a **valid certificate ID** that exists in
        the system.
            
        - If the certificate does not exist, the system will return an
        appropriate error response.
            
        - **Deleting a certificate cannot be undone**. If the user wants to keep
        a record, they should retrieve and store it before deletion.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67c70fd50b74c64c54d47e23
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '294'
            RateLimit-Reset:
              schema:
                type: integer
                example: '781'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '60'
            ETag:
              schema:
                type: string
                example: W/"3c-oTF3uDarvGWpwgoAWXTN8vt5N2s"
            Date:
              schema:
                type: string
                example: Tue, 04 Mar 2025 14:37:47 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Successfully Delete Certificate
  /api/v1/certificate/all:
    get:
      tags:
        - Certificate Entry > Public
      summary: '[Certificate Entry] Get All'
      description: >-
        ### **Endpoint: \[Certificate Entry\] Get All Certificates**


        **Method:** GET  

        **Path:** `api/v1/certificate/all`  

        **Authentication:** Not Required


        ---


        ### **Description:**


        This endpoint **retrieves all certificates** owned by a user. It
        provides details such as the certificate title, description, issuance
        year, and related link.


        ---


        ### **Notes:**


        - The response will return **all stored certificates** associated with
        the user.
            
        - If the user has no certificates, the response will return an empty
        list.
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '296'
            RateLimit-Reset:
              schema:
                type: integer
                example: '803'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '337'
            ETag:
              schema:
                type: string
                example: W/"151-yMcD/FjyG+ORfFdAWlu9M6dWP5g"
            Date:
              schema:
                type: string
                example: Tue, 04 Mar 2025 14:37:25 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Successfully Get All Certificate
                data:
                  - _id: 67c70fd50b74c64c54d47e23
                    title: Certification
                    description: >-
                      I'm grateful that i met Google Backend developer
                      Certification
                    link: https://credly.com/id
                    year: 2024
                    createdAt: '2025-03-04T14:36:05.940Z'
                    updatedAt: '2025-03-04T14:36:05.940Z'
                    __v: 0
  /api/v1/certificate/{id}:
    get:
      tags:
        - Certificate Entry > Public
      summary: '[Certificate Entry] Get By Id'
      description: |
        ### Endpoint: [Certificate Entry] Get By Id
        - **Method:** GET
        - **Path:** `api/v1/certificate/:id`
        - **Authentication:** Not Required
        - **Description:**
          - Retrieves details of a stored certificate.
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67c70fd50b74c64c54d47e23
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '295'
            RateLimit-Reset:
              schema:
                type: integer
                example: '794'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '331'
            ETag:
              schema:
                type: string
                example: W/"14b-iBzAOJDBNTQs+jl0RG7rwJ3On18"
            Date:
              schema:
                type: string
                example: Tue, 04 Mar 2025 14:37:34 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Successfully Get Certificate
                data:
                  _id: 67c70fd50b74c64c54d47e23
                  title: Certification
                  description: >-
                    I'm grateful that i met Google Backend developer
                    Certification
                  link: https://credly.com/id
                  year: 2024
                  createdAt: '2025-03-04T14:36:05.940Z'
                  updatedAt: '2025-03-04T14:36:05.940Z'
                  __v: 0
  /api/v1/experience/create:
    post:
      tags:
        - Experience Entry > Private (Need token)
      summary: '[Experience Entry] Create new'
      description: >-
        ### **Endpoint: \[Experience Entry\] Create New Experience**


        **Method:** POST  

        **Path:** `api/v1/experience/create`  

        **Authentication:** Required


        ---


        ### **Description:**


        This endpoint allows authenticated users to **add a new experience
        entry** to their profile. The experience can be a job, internship,
        freelance project, or any professional engagement.


        ---


        ### **Important Notes:**


        - This endpoint **only accepts JSON raw data** in the request body.
            
        - Experience entries must include an **entity (company or
        organization)** and a **position (job title or role).**
            
        - The `type` field determines the category of experience, such as
        `"job"`, `"internship"`, or `"freelance"`.
            
        - The `description` field supports **multi-line text** using `\n` for
        line breaks.
            
        - Both `startDate` and `endDate` must be in `YYYY-MM-DD` format.
            
        - If the experience is **currently ongoing**, the `endDate` field can be
        set to `null`.
            

        ---


        ### **Request Body Example:**


        ```

        {
          "entity": "PT Mabar Yok",
          "position": "Fulltime Manager",
          "type": "job",
          "description": "- Point 1 \n - Point 2",
          "startDate": "2025-04-07",
          "endDate": "2025-06-09"
        }

         ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                entity: PT Mabar Yok
                position: Fulltime Manager
                type: job
                description: |-
                  - Point 1 
                   - Point 2
                startDate: '2025-04-07'
                endDate: '2025-06-09'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '299'
            RateLimit-Reset:
              schema:
                type: integer
                example: '900'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '389'
            ETag:
              schema:
                type: string
                example: W/"185-z/U+BS+VbgeG2EFNMFBcKUcpHWA"
            Date:
              schema:
                type: string
                example: Tue, 04 Mar 2025 14:26:46 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Successfully create experience entry
                data:
                  entity: PT Produktif Yok
                  position: Fullstack Developer Intern
                  type: job
                  description: |-
                    - Point 1 
                     - Point 2
                  startDate: '2025-04-07T00:00:00.000Z'
                  endDate: '2025-06-09T00:00:00.000Z'
                  _id: 67c70da6fec9a45d59ddfd5d
                  createdAt: '2025-03-04T14:26:46.217Z'
                  updatedAt: '2025-03-04T14:26:46.217Z'
                  __v: 0
  /api/v1/experience/update/{id}:
    put:
      tags:
        - Experience Entry > Private (Need token)
      summary: '[Experience Entry] Update Experience'
      description: >-
        ### **Endpoint: \[Experience Entry\] Update Experience**


        **Method:** PUT  

        **Path:** `api/v1/experience/update/:id`  

        **Authentication:** Required


        ---


        ### **Description:**


        This endpoint allows authenticated users to **update an existing
        experience entry** by modifying one or more fields. Users can update
        details such as the entity (company/organization), position, job type,
        description, and dates.


        ---


        ### **Important Notes:**


        - The `id` parameter in the URL refers to the **experience entry ID**
        that needs to be updated.
            
        - **Partial updates are allowed** – users can update **only specific
        fields** without sending the entire object.
            
        - The system will **only modify the provided fields** while keeping the
        others unchanged.
            
        - If the provided `id` does not exist, an error will be returned.
            
        - This endpoint **does not allow updating** the experience entry's
        unique ID.
            

        ---


        ### **Request Body Example (Partial Update):**


        ```

        {
          "entity": "PT ini hasil revisi",
          "description": "Revisi"
        }

         ```

        🔹 In this example, **only the** **`entity`** **(company name) and**
        **`description`** **fields** will be updated. Other fields remain
        unchanged.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                entity: PT ini hasil revisi
                description: Revisi
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67c70da6fec9a45d59ddfd5d
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '298'
            RateLimit-Reset:
              schema:
                type: integer
                example: '887'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '370'
            ETag:
              schema:
                type: string
                example: W/"172-Yv6/6YCv7lN/ACdMJ98F58hk4S4"
            Date:
              schema:
                type: string
                example: Tue, 04 Mar 2025 14:33:05 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Successfully update experience
                data:
                  _id: 67c70da6fec9a45d59ddfd5d
                  entity: PT ini hasil revisi
                  position: Fullstack Developer Intern
                  type: job
                  description: Revisi
                  startDate: '2025-04-07T00:00:00.000Z'
                  endDate: '2025-06-09T00:00:00.000Z'
                  createdAt: '2025-03-04T14:26:46.217Z'
                  updatedAt: '2025-03-04T14:33:05.774Z'
                  __v: 0
  /api/v1/experience/delete/{id}:
    delete:
      tags:
        - Experience Entry > Private (Need token)
      summary: '[Experience Entry] Delete Experience'
      description: >-
        ### **Endpoint: \[Experience Entry\] Delete Experience**


        **Method:** DELETE  

        **Path:** `api/v1/experience/delete/:id`  

        **Authentication:** Required


        ---


        ### **Description:**


        This endpoint allows an authenticated user to **permanently delete** an
        experience entry based on its unique ID. Once deleted, the experience
        entry **cannot be recovered**.


        ---


        ### **Important Notes:**


        - The `id` parameter in the URL must be the **valid ID** of an existing
        experience entry.
            
        - **Only the owner of the experience entry** can delete it.
            
        - If the specified `id` does not exist, an error will be returned.
            
        - This action **cannot be undone**, so ensure that the experience entry
        is no longer needed before deleting.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67c70da6fec9a45d59ddfd5d
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '299'
            RateLimit-Reset:
              schema:
                type: integer
                example: '900'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '59'
            ETag:
              schema:
                type: string
                example: W/"3b-KJAZVFQpz9m4aVsK4qX7auOK2xA"
            Date:
              schema:
                type: string
                example: Tue, 04 Mar 2025 14:33:59 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Successfully Delete experience
  /api/v1/experience/all:
    get:
      tags:
        - Experience Entry > Public
      summary: '[Experience Entry] Get All'
      description: >-
        StartFragment


        ### **Endpoint: \[Experience Entry\] Get All**


        **Method:** GET  

        **Path:** `api/v1/experience/all`  

        **Authentication:** Not Required


        ---


        ### **Description:**


        This endpoint retrieves all experience entries stored in the database,
        available to provide information to any website visitor about user's
        experience


        ---


        ### **Important Notes:**


        - It returns **all stored experiences** from the system.
            
        - If there are no experience records, the response will return an
        **empty array (****`[]`****)** instead of an error.
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '298'
            RateLimit-Reset:
              schema:
                type: integer
                example: '821'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '386'
            ETag:
              schema:
                type: string
                example: W/"182-e9aVhnLZHQ+0RBO+aw9erKOtXdc"
            Date:
              schema:
                type: string
                example: Tue, 04 Mar 2025 14:30:44 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Successfully Get All experience
                data:
                  - _id: 67c70da6fec9a45d59ddfd5d
                    entity: PT Produktif Yok
                    position: Fullstack Developer Intern
                    type: job
                    description: |-
                      - Point 1 
                       - Point 2
                    startDate: '2025-04-07T00:00:00.000Z'
                    endDate: '2025-06-09T00:00:00.000Z'
                    createdAt: '2025-03-04T14:26:46.217Z'
                    updatedAt: '2025-03-04T14:26:46.217Z'
                    __v: 0
  /api/v1/experience/{id}:
    get:
      tags:
        - Experience Entry > Public
      summary: '[Experience Entry] Get By Id'
      description: >-
        ### **Endpoint: \[Experience Entry\] Get By Id**


        **Method:** GET  

        **Path:** `api/v1/experience/all`  

        **Authentication:** Not Required


        ---


        ### **Description:**


        This endpoint retrieves specific experience entries stored in the
        database by id


        ---


        ### **Important Notes:**


        - It returns **all stored experiences** from the system.
            
        - If there are no experience records, the response will return an error
        response.
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
          example: 67c70da6fec9a45d59ddfd5d
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '297'
            RateLimit-Reset:
              schema:
                type: integer
                example: '796'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '380'
            ETag:
              schema:
                type: string
                example: W/"17c-XYdQ9jvKVk9SrBsHuGYzVi37k9Q"
            Date:
              schema:
                type: string
                example: Tue, 04 Mar 2025 14:31:09 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Successfully Get experience
                data:
                  _id: 67c70da6fec9a45d59ddfd5d
                  entity: PT Produktif Yok
                  position: Fullstack Developer Intern
                  type: job
                  description: |-
                    - Point 1 
                     - Point 2
                  startDate: '2025-04-07T00:00:00.000Z'
                  endDate: '2025-06-09T00:00:00.000Z'
                  createdAt: '2025-03-04T14:26:46.217Z'
                  updatedAt: '2025-03-04T14:26:46.217Z'
                  __v: 0
  /api/v1/file/upload:
    post:
      tags:
        - File or Image Endpoint
      summary: '[File] Upload'
      description: >-
        **Endpoint: Uploading File**  

        **Method:** POST  

        **Path:** `api/v1/file/upload`  

        **Authentication:** Required


        ### **Description:**


        This endpoint allows the frontend or client to upload files/images when
        updating existing data or creating new data that includes file/image
        attachments.


        You must provide the appropriate `id` corresponding to the field name.


        ### **Note:**


        The **file field name** MUST be one of the following:


        - `cv_file`
            
        - `profile_image`
            
        - `project_thumbnail_image`
            

        Any other file field name will result in a **400 Bad Request** error.


        - `cv_file` is used to update/add a user’s CV. It requires the **user
        profile ID**.
            
        - `profile_image` is used to update a user’s profile picture. It
        requires the **user profile ID**.
            
        - `project_thumbnail_image` is used to update the thumbnail image of a
        project. It requires the **project ID**.
            

        You must send the correct ID corresponding to the field name.


        Field names that share the same ID can be sent together.


        For example, `cv_file` and `profile_image` can be sent together since
        both belong to the user profile.


        ---


        ## **How To Use:**


        ✅ **Case: Creating a New Project (Including an Image in Project Data)**


        1. The user fills in all project details and clicks **Submit**.
            
        2. The frontend sends the project data to the backend to create a new
        project ([create project
        endpoint](https://go.postman.co/workspace/e673e172-c878-4d61-9366-0a961dd8cade/documentation/26853080-5a6330d2-088a-4e18-bf50-52335f6ab02b?entity=request-ce3839dc-44ce-4a01-9cdb-b30b7bfd9d25)).
        The payload **must not** contain any files/images.
            
        3. The backend responds with the newly created project **ID**.
            
        4. The frontend sends the image file to the backend along with the
        project **ID** (using this file upload endpoint).
            
        5. The backend processes the request and responds accordingly.
            

        ✅ **Case: Updating a Project Image**


        1. The user changes the project image and clicks **Submit**.
            
        2. The frontend sends the new image file along with the corresponding
        project **ID** to this file upload endpoint.
            
        3. The backend processes the request and responds accordingly.
            

        ✅ **Case: Updating Profile Image**


        1. The user changes their profile picture and clicks **Submit**.
            
        2. The frontend sends the new image file along with the **user profile
        ID** to this file upload endpoint.
            
        3. The backend processes the request and responds accordingly.
            

        🚫 **Case: Updating Project Thumbnail & Profile Image Together**


        1. The frontend sends both the project thumbnail image and the profile
        image using the **user profile ID** to this endpoint.
            
        2. The backend will save the **profile image** (since it matches the
        user profile ID) but **will not save the project thumbnail image**
        (because the ID is incorrect).
            
        3. The response will be **400 Bad Request**, and the project thumbnail
        update will fail.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                cv_file:
                  type: string
                  description: cv_file are part of user profile table
                  format: binary
                profile_image:
                  type: string
                  description: profile_image are part of user profile table
                  format: binary
                project_thumbnail_image:
                  type: string
                  description: project_thumbnail_image are part of project table
                  format: binary
                id:
                  type: string
                  example: 67e2d7b3afcf2a5f6b26d6c4
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '298'
            RateLimit-Reset:
              schema:
                type: integer
                example: '855'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '153'
            ETag:
              schema:
                type: string
                example: W/"99-tlN41Aa2z0M0d6TJQV1Rlj0FUY4"
            Date:
              schema:
                type: string
                example: Tue, 25 Mar 2025 17:57:58 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: '[200 OK] Upload One'
                  value:
                    success: true
                    message: File Successfully Uploaded
                    data:
                      - cv_file:
                          url: >-
                            174292547882617344115-3a4c-41e8-b014-05c36dd41512.pdf
                          download: 0
                example-1:
                  summary: '[200 OK] Multiple Upload with the same ID'
                  value:
                    success: true
                    message: File Successfully Uploaded
                    data:
                      - cv_file:
                          url: >-
                            174292550134947734fdd-1c29-47f0-9211-9b5d88376e40.pdf
                          download: 0
                      - profile_image: 1742925501351d56e25c8-5788-4cd8-b840-f92ff384db8d.jpeg
        '400':
          description: Bad Request
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            RateLimit-Policy:
              schema:
                type: string
                example: 300;w=900
            RateLimit-Limit:
              schema:
                type: integer
                example: '300'
            RateLimit-Remaining:
              schema:
                type: integer
                example: '299'
            RateLimit-Reset:
              schema:
                type: integer
                example: '900'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '58'
            ETag:
              schema:
                type: string
                example: W/"3a-NBSgjbTx0jQQGvbXgyaAB1rfQ+E"
            Date:
              schema:
                type: string
                example: Tue, 25 Mar 2025 17:57:13 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                message: Project not found or deleted
  /api/v1/visitor:
    post:
      tags:
        - default
      summary: '[Public] Track Visitor'
      description: |
        ### Endpoint: [Public] Track Visitor
        - **Method:** POST
        - **Path:** `api/v1/visitor`
        - **Authentication:** Not Required
        - **Description:**
          - General API endpoint.
      requestBody:
        content: {}
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/auth/login:
    post:
      tags:
        - default
      summary: '[Auth] Login'
      description: "### Endpoint: [Auth] Login\n- **Method:** POST\n- **Path:** `api/v1/auth/login`\n- **Authentication:** Not Required\n- **Request Body:**\n  - `{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}`\n- **Description:**\n  - General API endpoint.\n"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: '{{username}}'
                password: '{{password}}'
      security:
        - noauthAuth: []
      responses:
        '200':
          description: OK
          headers:
            Content-Security-Policy:
              schema:
                type: string
                example: >-
                  default-src 'self';base-uri 'self';font-src 'self' https:
                  data:;form-action 'self';frame-ancestors 'self';img-src 'self'
                  data:;object-src 'none';script-src 'self';script-src-attr
                  'none';style-src 'self' https:
                  'unsafe-inline';upgrade-insecure-requests
            Cross-Origin-Opener-Policy:
              schema:
                type: string
                example: same-origin
            Cross-Origin-Resource-Policy:
              schema:
                type: string
                example: same-origin
            Origin-Agent-Cluster:
              schema:
                type: string
                example: '?1'
            Referrer-Policy:
              schema:
                type: string
                example: no-referrer
            Strict-Transport-Security:
              schema:
                type: string
                example: max-age=31536000; includeSubDomains
            X-Content-Type-Options:
              schema:
                type: string
                example: nosniff
            X-DNS-Prefetch-Control:
              schema:
                type: string
                example: 'off'
            X-Download-Options:
              schema:
                type: string
                example: noopen
            X-Frame-Options:
              schema:
                type: string
                example: SAMEORIGIN
            X-Permitted-Cross-Domain-Policies:
              schema:
                type: string
                example: none
            X-XSS-Protection:
              schema:
                type: integer
                example: '0'
            Vary:
              schema:
                type: string
                example: Origin, Accept-Encoding
            Access-Control-Allow-Credentials:
              schema:
                type: boolean
                example: 'true'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '226'
            ETag:
              schema:
                type: string
                example: W/"e2-5DfeCuwaks5IaeI5uIzsUuGlFNk"
            Date:
              schema:
                type: string
                example: Thu, 27 Feb 2025 07:53:21 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Berhasil Login
                token: >-
                  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpaWQiOiI2N2JiYmY5NjcyODJmZGE3ZmRkYmFmZDIiLCJpYXQiOjE3NDA2NDI4MDEsImV4cCI6MTc0MDY1MDAwMX0.wDIbJFPpfW8FQTjS7XiRKoDPPIZbYm56OCD1RPnumk0
  /api/v1/auth/logout:
    post:
      tags:
        - default
      summary: '[Auth] Logout'
      description: |
        ### Endpoint: [Auth] Logout
        - **Method:** POST
        - **Path:** `api/v1/auth/logout`
        - **Authentication:** Not Required
        - **Description:**
          - General API endpoint.
      requestBody:
        content: {}
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '43'
            ETag:
              schema:
                type: string
                example: W/"2b-N3W8w6IdMA7HcuLYKfLCuJgmVbk"
            Date:
              schema:
                type: string
                example: Tue, 11 Feb 2025 07:46:40 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                status: true
                message: Berhasil Logout